<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>原质，纯粹</title>
  
  <subtitle>记录的是文字，回忆的是人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jsonya.github.io/"/>
  <updated>2019-04-25T12:15:04.324Z</updated>
  <id>https://jsonya.github.io/</id>
  
  <author>
    <name>暮城</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>new 实现</title>
    <link href="https://jsonya.github.io/2019/04/12/new-%E5%AE%9E%E7%8E%B0/"/>
    <id>https://jsonya.github.io/2019/04/12/new-实现/</id>
    <published>2019-04-12T15:29:45.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造函数和实例化"><a href="#构造函数和实例化" class="headerlink" title="构造函数和实例化"></a>构造函数和实例化</h2><p><code>js</code>中可以通过构造函数批量创建对象，创建的过程通过<code>new</code>关键词实现，这个过程也叫实例化，实例化的对象具有默认的属性和原型方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I'm <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonya = <span class="keyword">new</span> Person(<span class="string">'jsonya'</span>, <span class="number">25</span>);</span><br><span class="line">jsonya.sayHello();</span><br></pre></td></tr></table></figure></p><h2 id="new-的过程做了什么？"><a href="#new-的过程做了什么？" class="headerlink" title="new 的过程做了什么？"></a><code>new</code> 的过程做了什么？</h2><ul><li>创建一个空对象</li><li>将这个空对象的原型指向构造函数的原型</li><li>执行构造函数，并将默认属性挂载到这个空对象上</li><li>判断构造函数的返回值，如果是对象则返回这个对象，否则返回这个空对象</li></ul><h2 id="模拟new-关键字？"><a href="#模拟new-关键字？" class="headerlink" title="模拟new 关键字？"></a>模拟<code>new</code> 关键字？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// New 函数的第一个参数为构造函数，剩余的参数为实例化传入的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// step1: 创建一个空对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 获取构造函数，默认是第一个参数为构造函数，所以利用数组将参数第一个推出，原来的arguments只剩下非构造函数部分</span></span><br><span class="line">  <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// step2: 将这个空对象的原型指向构造函数原型</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  <span class="comment">// step3: 执行构造函数，并且将属性挂载到空对象</span></span><br><span class="line">  <span class="keyword">const</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// step4: 判断返回值是不是对象</span></span><br><span class="line">  <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I'm <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> jsonya = New(Person, <span class="string">'jsonya'</span>, <span class="number">25</span>);</span><br><span class="line">jsonya.sayHello();</span><br></pre></td></tr></table></figure><p>ok，实现了一个<code>new</code>了，但其实我们通过分析原生的new方法可以看出，在new一个函数的时候，会返回一个<code>func</code>同时在这个<code>func</code>里面会返回一个对象<code>Object</code>，这个对象包含父类func的属性以及隐藏的<code>__proto__</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// step1: 创建一个空对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="comment">// step2: 将这个空对象的原型指向构造函数原型</span></span><br><span class="line">    obj.__proto__ = Constructor.prototype;</span><br><span class="line">    <span class="comment">// step3: 执行构造函数，并且将属性挂载到空对象</span></span><br><span class="line">    <span class="keyword">const</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// step4: 判断返回值是不是对象</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? result : obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I'm <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span> years old`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonya = New(Person)(<span class="string">'jsonya'</span>, <span class="number">25</span>);</span><br><span class="line">jsonya.sayHello();</span><br></pre></td></tr></table></figure><p>可以看出我们的第二种实现原理上是一致的 ，只不过我们将构造函数和参数区分开了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;构造函数和实例化&quot;&gt;&lt;a href=&quot;#构造函数和实例化&quot; class=&quot;headerlink&quot; title=&quot;构造函数和实例化&quot;&gt;&lt;/a&gt;构造函数和实例化&lt;/h2&gt;&lt;p&gt;&lt;code&gt;js&lt;/code&gt;中可以通过构造函数批量创建对象，创建的过程通过&lt;code&gt;ne
      
    
    </summary>
    
    
      <category term="js" scheme="https://jsonya.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>常用正则记录</title>
    <link href="https://jsonya.github.io/2018/07/13/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://jsonya.github.io/2018/07/13/常用正则记录/</id>
    <published>2018-07-13T18:15:11.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则解析"><a href="#正则解析" class="headerlink" title="正则解析"></a>正则解析</h2><p><a href="https://regexr.com/" target="_blank" rel="noopener">ResExr</a></p><h2 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h2><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否含有英文字符</span></span><br><span class="line">/.*?[a-zA-Z]+.*?<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 是否含中文字符:</span></span><br><span class="line"><span class="regexp">/</span>.*?[\u4E00-\u9FA5]+.*?<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 是否含特殊字符:</span></span><br><span class="line"><span class="regexp">/</span>[<span class="string">`~!@#$^&amp;()=|&#123;&#125;’:;’,.&lt;&gt;/?~！@#￥……&amp;（）;|&#123;&#125;【】‘；：”“’。，、？《》]/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 验证邮件: </span></span><br><span class="line"><span class="string">/^([\w]+([\w-\.+]*[\w-]+)?)@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.)|(([\w-]+\.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)(\]?)$/i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 验证url: </span></span><br><span class="line"><span class="string">^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)[a-z0-9]+([\-\.]&#123;1&#125;[a-z0-9]+)*\.[a-z]&#123;2,5&#125;(:[0-9]&#123;1,5&#125;)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 验证手机号码：</span></span><br><span class="line"><span class="string">^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\d&#123;8&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 域名：</span></span><br><span class="line"><span class="string">[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 手机号码：</span></span><br><span class="line"><span class="string">^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\d&#123;8&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：</span></span><br><span class="line"><span class="string">^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 国内电话号码(0511-4405222、021-87888822)：</span></span><br><span class="line"><span class="string">\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 18位身份证号码(数字、字母x结尾)：</span></span><br><span class="line"><span class="string">^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</span></span><br><span class="line"><span class="string">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</span></span><br><span class="line"><span class="string">^[a-zA-Z]\w&#123;5,17&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</span></span><br><span class="line"><span class="string">^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 日期格式：</span></span><br><span class="line"><span class="string">^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 数字：</span></span><br><span class="line"><span class="string">^[0-9]*$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// n位的数字：</span></span><br><span class="line"><span class="string">^\d&#123;n&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 至少n位的数字：</span></span><br><span class="line"><span class="string">^\d&#123;n,&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">m-n位的数字：^\d&#123;m,n&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 零和非零开头的数字：</span></span><br><span class="line"><span class="string">^(0|[1-9][0-9]*)$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非零开头的最多带两位小数的数字：</span></span><br><span class="line"><span class="string">^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 带1-2位小数的正数或负数：</span></span><br><span class="line"><span class="string">^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 正数、负数、和小数：</span></span><br><span class="line"><span class="string">^(\-|\+)?\d+(\.\d+)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 有两位小数的正实数：</span></span><br><span class="line"><span class="string">^[0-9]+(.[0-9]&#123;2&#125;)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 有1~3位小数的正实数：</span></span><br><span class="line"><span class="string">^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非零的正整数：</span></span><br><span class="line"><span class="string">^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非零的负整数：</span></span><br><span class="line"><span class="string">^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非负整数：</span></span><br><span class="line"><span class="string">^\d+$ 或 ^[1-9]\d*|0$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非正整数：</span></span><br><span class="line"><span class="string">^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非负浮点数：</span></span><br><span class="line"><span class="string">^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 非正浮点数：</span></span><br><span class="line"><span class="string">^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 正浮点数：</span></span><br><span class="line"><span class="string">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 负浮点数：</span></span><br><span class="line"><span class="string">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 浮点数：</span></span><br><span class="line"><span class="string">^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 汉字：</span></span><br><span class="line"><span class="string">^[\u4e00-\u9fa5]&#123;0,&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 英文和数字：</span></span><br><span class="line"><span class="string">^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 长度为3-20的所有字符：</span></span><br><span class="line"><span class="string">^.&#123;3,20&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 由26个英文字母组成的字符串：</span></span><br><span class="line"><span class="string">^[A-Za-z]+$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 由26个大写英文字母组成的字符串：</span></span><br><span class="line"><span class="string">^[A-Z]+$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 由26个小写英文字母组成的字符串：</span></span><br><span class="line"><span class="string">^[a-z]+$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 由数字和26个英文字母组成的字符串：</span></span><br><span class="line"><span class="string">^[A-Za-z0-9]+$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 由数字、26个英文字母或者下划线组成的字符串：</span></span><br><span class="line"><span class="string">^\w+$ 或 ^\w&#123;3,20&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 中文、英文、数字包括下划线：</span></span><br><span class="line"><span class="string">^[\u4E00-\u9FA5A-Za-z0-9_]+$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 中文、英文、数字但不包括下划线等符号：</span></span><br><span class="line"><span class="string">^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 可以输入含有^%&amp;',;=?$\"等字符：</span></span><br><span class="line"><span class="string">[^%&amp;',;=?$\x22]+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 禁止输入含有~的字符：</span></span><br><span class="line"><span class="string">[^~\x22]+</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则解析&quot;&gt;&lt;a href=&quot;#正则解析&quot; class=&quot;headerlink&quot; title=&quot;正则解析&quot;&gt;&lt;/a&gt;正则解析&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://regexr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="Regexp" scheme="https://jsonya.github.io/tags/Regexp/"/>
    
      <category term="正则表达式" scheme="https://jsonya.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>sentry上传sourcemap</title>
    <link href="https://jsonya.github.io/2018/07/03/sentry%E4%B8%8A%E4%BC%A0sourcemap/"/>
    <id>https://jsonya.github.io/2018/07/03/sentry上传sourcemap/</id>
    <published>2018-07-03T09:46:15.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<p>PS: 本文并没完全成文</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>阅读这篇文章的大前提是你已经创建了一个sentry项目，但是希望在sentry的报错中能够提示更多的信息，所以希望通过sourcemap来定位问题。这篇文章基于vue-cli中的webpack模式，其他模式原理一样。</p><p>注意：本文只是提供思路，并不可以用于生产环境，因为涉及到打包流程，而每个项目的打包方式并不一致，所以可以根据此思路去实现自己的上报流程。</p><h3 id="sentry-cli构建"><a href="#sentry-cli构建" class="headerlink" title="sentry-cli构建"></a>sentry-cli构建</h3><h4 id="1-、生成api-key"><a href="#1-、生成api-key" class="headerlink" title="1)、生成api-key"></a>1)、生成api-key</h4><p>这一步主要是用来上传时登录需要，点击头像 =&gt; 点击API keys</p><p><img src="https://cdn.yuque.com/yuque/0/2018/jpeg/85168/1530582273583-8b66fa0f-3da1-470a-95b0-d7abaad98235.jpeg" alt="1.jpg | center | 262x507"></p><p>如果你已经创建过token，你的界面会和我一样，如果没创建，根据提示创济南即可，但注意一点的是，需要勾选project:write</p><p><img src="https://cdn.yuque.com/yuque/0/2018/jpeg/85168/1530582295319-39b405bc-aad5-4ca1-a615-654fc720d053.jpeg" alt="2.jpg | center | 747x442"></p><h4 id="2）、安装sentry-cli"><a href="#2）、安装sentry-cli" class="headerlink" title="2）、安装sentry-cli"></a>2）、安装sentry-cli</h4><ul><li><p>先全局安装sentry-cli</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sentry-cli-binary -g</span><br></pre></td></tr></table></figure></li><li><p>安装完成后登录sentry</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentry-cli login</span><br></pre></td></tr></table></figure></li></ul><p>这时会提示输入token，把刚才第一步创建的token粘贴到这里，运行</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530552637553-bb8e18c0-19d2-4786-bc20-d616859a5ce8.png" alt="image.png | left | 827x262"></p><p>然后你会看到提示创建了一个.sentrylrc文件，文件的内容如下</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530549427107-c112d15b-ab27-4ac1-aaef-bb385a819477.png" alt="image.png | left | 827x140"></p><p>补充org和project信息到.sentrylrc</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530549601530-bf3a233c-c3bf-4553-a295-f8bd40f48ce3.png" alt="image.png | left | 827x190"></p><h4 id="3）、注入异常"><a href="#3）、注入异常" class="headerlink" title="3）、注入异常"></a>3）、注入异常</h4><p>我们在代码中，注入一些异常，并指定release版本</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530553222545-09b4d190-900b-444d-b1ca-761126577cf6.png" alt="image.png | left | 827x216"></p><h4 id="4-、构建代码"><a href="#4-、构建代码" class="headerlink" title="4)、构建代码"></a>4)、构建代码</h4><p>运行命令<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p>最终会在根目录生成dist文件夹。</p><h4 id="5-、上传sourcemap"><a href="#5-、上传sourcemap" class="headerlink" title="5)、上传sourcemap"></a>5)、上传sourcemap</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentry-cli releases files &lt;release名称&gt; upload-sourcemaps --url-prefix &lt;线上资源URI&gt; &lt;打包出来的js文件所在目录&gt;</span></span><br><span class="line">sentry-cli releases files demo-test001 upload-sourcemaps --url-prefix <span class="string">'~/static/js'</span> <span class="string">'./dist/static/js'</span></span><br></pre></td></tr></table></figure><p>运行例子后的结果如图</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530551995963-fc26e3b2-a396-4da7-83ff-fafdde7fdf1b.png" alt="image.png | left | 827x239"></p><p>打开sentry的项目，查看版本，会发现多了一些资源，但实际上有用的是map文件，所以在上传完成后需要根据实际情况在构建脚本中把对应的map文件删除，避免打包到生产中(其中一个原因是文件太大，另一个原因是不安全)。</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530552025253-ef08a98e-f68f-4ef5-820b-e83c0642a647.png" alt="image.png | left | 827x453"></p><h4 id="6）、触发异常"><a href="#6）、触发异常" class="headerlink" title="6）、触发异常"></a>6）、触发异常</h4><p>这时，你可以通过访问本地的<a href="http://127.0.0.1:6324" target="_blank" rel="noopener">http://127.0.0.1:6324</a>，然后触发我们构建的异常，因为我本地构建了一个服务，如果你也希望构建此服务，你可以通过安装http的服务包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 我这个例子中线上资源是因为我在本地通过http-server起了一个服务来访问</span><br><span class="line"># 如果你也希望这么做，你可以</span><br><span class="line">npm i -g http-server </span><br><span class="line">cd dist</span><br><span class="line">http-server -p 6324</span><br></pre></td></tr></table></figure></p><p>此时会看到控制台抛出异常，同时会发送一个请求到sentry的服务器</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530552048090-1dd97d49-cb55-4ea4-888b-6205b06b878d.png" alt="image.png | left | 596x167"></p><p>此时打开sentry的控制台，你会看到刚才触发的错误</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530552069838-9cea92c0-f28d-49d9-b5a0-281488cf6a0b.png" alt="image.png | left | 685x201"></p><p>打开这个错误，就可以看到具体的错误信息，定位问题变得更加容易</p><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1530552097473-e3b62274-0b44-46b8-8008-748552f97e1c.png" alt="image.png | left | 827x313"></p><h3 id="sentry-webpack-plugin构建"><a href="#sentry-webpack-plugin构建" class="headerlink" title="@sentry/webpack-plugin构建"></a><span data-type="background" style="background-color:rgb(248, 248, 248)">@sentry/webpack-plugin构建</span></h3><p>上面利用sentry-cli构建时，相对麻烦，而且会暴露key等一些信息，所以我们希望利用webpack插件来加快我们的上传。</p><h4 id="1-、安装-sentry-webpack-plugin插件-一般会同时安装-sentry-cli"><a href="#1-、安装-sentry-webpack-plugin插件-一般会同时安装-sentry-cli" class="headerlink" title="1)、安装@sentry/webpack-plugin插件, 一般会同时安装@sentry/cli"></a>1)、安装@sentry/webpack-plugin插件, 一般会同时安装@sentry/cli</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @sentry/webpack-plugin --dev</span><br></pre></td></tr></table></figure><h4 id="2）、根目录创建-sentryclirc文件"><a href="#2）、根目录创建-sentryclirc文件" class="headerlink" title="2）、根目录创建.sentryclirc文件"></a>2）、根目录创建.sentryclirc文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[defaults]</span></span><br><span class="line"><span class="string">url</span> <span class="string">=</span> <span class="attr">https://sentry.io/</span></span><br><span class="line"><span class="string">org</span> <span class="string">=</span> <span class="string">your</span> <span class="string">org</span></span><br><span class="line"><span class="string">project</span> <span class="string">=</span> <span class="string">your</span> <span class="string">project</span></span><br><span class="line"></span><br><span class="line"><span class="string">[auth]</span></span><br><span class="line"><span class="string">token</span> <span class="string">=</span> <span class="string">your</span> <span class="string">token</span></span><br></pre></td></tr></table></figure><h4 id="3-、在config-prod-env-js创建环境变量"><a href="#3-、在config-prod-env-js创建环境变量" class="headerlink" title="3)、在config/prod.env.js创建环境变量"></a>3)、在config/prod.env.js创建环境变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/prod.env.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> release = <span class="string">'demo-test006'</span>; <span class="comment">// 可以根据package.json的版本号或者Git的tag命名</span></span><br><span class="line">process.env.RELEASE_VERSION = release;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  RELEASE_VERSION: <span class="string">`"<span class="subst">$&#123;release&#125;</span>"`</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-、写入插件"><a href="#4-、写入插件" class="headerlink" title="4)、写入插件"></a>4)、写入插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SentryPlugin = <span class="built_in">require</span>(<span class="string">'@sentry/webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// ...省略一堆</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// ...省略一堆</span></span><br><span class="line">  <span class="keyword">new</span> SentryPlugin(&#123;</span><br><span class="line">    include: <span class="string">'./dist'</span>,</span><br><span class="line">    release: process.env.RELEASE_VERSION,</span><br><span class="line">    configFile: <span class="string">'sentry.properties'</span>,</span><br><span class="line">    urlPrefix: <span class="string">'~/'</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="5-、运行打包"><a href="#5-、运行打包" class="headerlink" title="5)、运行打包"></a>5)、运行打包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>此时在服务中打开触发错误，你就会在sentry中查看到具体的错误信息。对比cli构建的方式，webpack的优势还是蛮大的，但是利用cli的好处是我可以把token放在服务器，这样就可以避免token的泄露。</p><h3 id="webpack-sentry-plugin构建"><a href="#webpack-sentry-plugin构建" class="headerlink" title="webpack-sentry-plugin构建"></a><span data-type="background" style="background-color:rgb(248, 248, 248)">webpack-sentry-plugin构建</span></h3><p>这个包目前支持webpack1\2\3版本上传sourcemap，而且周下载量也达到11k。这个包有一个优势是可以在上传后删除打包后的sourcemap，可以节省后面上传打包后文件的过滤sourcemap的操作。<br><span data-type="color" style="color:#F5222D">PS: 先确保没有全局安装sentry-cli包，否则会有冲突</span></p><h4 id="1-、安装webpack-sentry-plugin插件"><a href="#1-、安装webpack-sentry-plugin插件" class="headerlink" title="1)、安装webpack-sentry-plugin插件"></a>1)、安装<span data-type="background" style="background-color:rgb(248, 248, 248)">webpack-sentry-plugin插件</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-sentry-plugin --save-dev</span><br></pre></td></tr></table></figure><h4 id="2-、根目录创建sentry-config-js-仅仅是为了方便管理token"><a href="#2-、根目录创建sentry-config-js-仅仅是为了方便管理token" class="headerlink" title="2)、根目录创建sentry.config.js(仅仅是为了方便管理token)"></a>2)、根目录创建sentry.config.js(仅仅是为了方便管理token)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  organization: <span class="string">''</span>,</span><br><span class="line">  project: <span class="string">''</span>,</span><br><span class="line">  apiKey: <span class="string">''</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-、在config-prod-env-js创建环境变量（同上）"><a href="#3-、在config-prod-env-js创建环境变量（同上）" class="headerlink" title="3)、在config/prod.env.js创建环境变量（同上）"></a>3)、在config/prod.env.js创建环境变量（同上）</h4><h4 id="4-、写入插件-1"><a href="#4-、写入插件-1" class="headerlink" title="4)、写入插件"></a>4)、写入插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SentryPlugin = <span class="built_in">require</span>(<span class="string">'webpack-sentry-plugin'</span>)</span><br><span class="line"><span class="comment">// ...省略一堆</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// ...省略一堆</span></span><br><span class="line">  <span class="keyword">new</span> SentryPlugin(<span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      release: process.env.RELEASE_VERSION,</span><br><span class="line">      deleteAfterCompile: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// exclude: /(\.css\.map| \.css | \.html)$/,</span></span><br><span class="line">      include: <span class="regexp">/(\.js\.map | \.js)$/</span>, <span class="comment">// 只上传js和map文件</span></span><br><span class="line">      filenameTransform: <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'~/'</span> + filename</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, <span class="built_in">require</span>(<span class="string">'../sentry.config.js'</span>)))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="5-、运行打包-1"><a href="#5-、运行打包-1" class="headerlink" title="5)、运行打包"></a>5)、运行打包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>其实这个插件和官方的@sentery/webpack-plugin功能差不多，只不过多了一些配置项，例如删除sourcemap</p><h3 id="增强sentry异常捕捉"><a href="#增强sentry异常捕捉" class="headerlink" title="增强sentry异常捕捉"></a>增强sentry异常捕捉</h3><p>续。。</p><h3 id="sentry的小知识点"><a href="#sentry的小知识点" class="headerlink" title="sentry的小知识点"></a>sentry的小知识点</h3><ul><li><strong>发送邮件</strong><br>一般来说，sentry是默认会打开邮箱发送选项的，如果触发错误后并没有收到邮件，你可以点击下方的框框，勾选邮件</li></ul><p><img src="https://cdn.yuque.com/yuque/0/2018/jpeg/85168/1530557058391-83dcb6ff-9884-4e26-8558-1b4a0753ae7e.jpeg" alt="Jietu20180703-024254.jpg | center | 827x295"></p><p><img src="https://cdn.yuque.com/yuque/0/2018/jpeg/85168/1530557066190-d430040e-ae0a-4eb9-9f7b-5f1d895ae74c.jpeg" alt="Jietu20180703-024327.jpg | center | 827x464"></p><p><img src="https://cdn.yuque.com/yuque/0/2018/jpeg/85168/1530557074150-52ca715a-c774-4fef-89b1-cd6ef5a77973.jpeg" alt="Jietu20180703-024359.jpg | center | 827x393"></p><ul><li><p>设置触发异常的用户,更有利于追踪，文档：<a href="https://docs.sentry.io/learn/context/" target="_blank" rel="noopener">https://docs.sentry.io/learn/context/</a></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般是登录登录后获取到具体信息时带入</span></span><br><span class="line">Raven.setUserContext(&#123;</span><br><span class="line">  user: <span class="string">'xxx'</span>,</span><br><span class="line">  id: <span class="string">'sss'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Issue关联GITHUB/GITLAB（暂时用处不大）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PS: 本文并没完全成文&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;阅读这篇文章的大前提是你已经创建了一个sentry项目，但是希望在sentry的报错中能够提示更多的
      
    
    </summary>
    
    
      <category term="sentry" scheme="https://jsonya.github.io/tags/sentry/"/>
    
      <category term="sourcemap" scheme="https://jsonya.github.io/tags/sourcemap/"/>
    
      <category term="监控" scheme="https://jsonya.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="webpack" scheme="https://jsonya.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Puppeteer爬取Gitchat课程</title>
    <link href="https://jsonya.github.io/2018/06/26/Puppeteer%E7%88%AC%E5%8F%96Gitchat%E8%AF%BE%E7%A8%8B/"/>
    <id>https://jsonya.github.io/2018/06/26/Puppeteer爬取Gitchat课程/</id>
    <published>2018-06-26T15:37:21.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想起<code>GitChat</code>的会员要过期了，但是之前购买的达人课只看了一部分，过期不能看就很可惜了，毕竟有些课程质量还是挺好的，所以就想着把课程下载下来拉到本地去看，但是<code>Gitchat</code>的课程并不能够把整个课程下载，需要单个单个的下载，单纯的靠人力处理就只会浪费时间，更何况我是个小<code>coder</code>，尽然希望通过代码来实现，机器能做就就让机器去做，所以就想起了通过爬取的方式下载下来。<br>也许你会问为什么会想到爬虫实现，首先了解下什么是爬虫，从定义上来说，爬虫是通过<span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">脚本请求网页并分析网页来提取有效信息的一种行为，我现在的需求就是能够希望获取到所有的课程并下载，其中最重要的一点就是课程信息的获取，毫无疑问爬虫是能够实现的并且是最佳的实现方式。</span></span></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li><strong>浏览器环境</strong><br>  因为这次爬取都是需要基于浏览器环境进行的，所以需要有浏览器环境的支持，目前达到要求的可选有<code>puppeteer</code>、<span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><code>phantomjs</code></span></span><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">、</span></span><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><code>selenium-webdriver</code></span></span>；但是后两者环境配置复杂并且难用的api决定了难以担当此任；</li><li><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"><strong>解析文档</strong></span></span><br>  毋庸置疑<code>cheerio</code>是目前<code>node</code>端爬虫最好用的dom解析库，它<span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)">具备了像 </span></span><code>jquery</code><span data-type="color" style="color:rgb(38, 38, 38)"><span data-type="background" style="background-color:rgb(255, 255, 255)"> 一样遍历跟操作DOM元素的能力，当然它只拥有解析能力，并没有事件函数；</span></span></li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>也许你会问，为什么爬虫能够解决我的问题？</p><ul><li><p><strong>登录账号问题</strong><br>  首先，Gitchat是没有输入框登录，它的登录方式是通过微信扫描二维码来登录，也就是和微信服务有一层绑定关系，所以第一步要解决的就是怎么绕过这层扫描登录；所以我首先想到的就是有没有通过<code>cookie</code>来校验登录状态，通过分析登录前后的<code>cookie</code>的，发现其中的一些差异极有可能是和账号有关的，所以直接把登录态的<code>cookie</code>获取出来来模拟登录，没想到真的成功了。。。</p></li><li><p><strong>跳转到具体课程</strong><br>  通过对页面的分析得知，Gitchat里面的每个大课下的小课跳转都是通过js的<code>onclick</code>函数来动态控制的，所以需要分析<code>onclick</code>函数下的跳转规律，发现下面一行代码</p></li></ul><p><img src="https://cdn.yuque.com/yuque/0/2018/png/85168/1528807161742-684e0cf9-9dff-4ca4-b4f6-843d454be4be.png" alt="image.png | left | 719x26"></p><pre><code>然后通过正则把跳转需要的`columnId`、`id`拿到，最终也实现了跳转课程</code></pre><ul><li><p><strong>获取下载链接</strong><br>  最初的想法是通过<code>puppeteer</code>来模拟点击的方式来跳转下载链接的，但是奇怪的是跳转后的page并不是之前创建的<code>page</code>，所以并不能够获取上下文环境，所以对应的api也就不能用了，所以这种方式失败了；最后分析整个文档得知下载的链接隐藏在了<code>script</code>里面，所以最终还是通过正则表达式匹配出来。</p></li><li><p><strong>没有PDF下载的情况</strong><br>  某些课程下其实并没有提供下载功能，所以并不能够通过获取pdf链接的方式来下载，所以只能够寻求别的方法，想到既然<code>chrome</code>能够做的<code>puppeteer</code>都能做，那当然想到截屏的功能了，所以找了下<code>puppeteer</code>截图并打印的api，最终实现。</p></li></ul><h2 id="爬虫实现"><a href="#爬虫实现" class="headerlink" title="爬虫实现"></a>爬虫实现</h2><h4 id="1）初始化浏览器"><a href="#1）初始化浏览器" class="headerlink" title="1）初始化浏览器"></a>1）初始化浏览器</h4><p>利用<code>puppeteer</code>来创建浏览器环境<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化浏览器</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">openBrowser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器</span></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    <span class="comment">// 这个属性是控制是否有GUI界面的</span></span><br><span class="line">    headless: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 创建标签页</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    browser,</span><br><span class="line">    page,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-跳转到首页并设置登录"><a href="#2-跳转到首页并设置登录" class="headerlink" title="2) 跳转到首页并设置登录"></a>2) 跳转到首页并设置登录</h4><p>通过对比登陆前后的<code>cookie</code>，分析出<code>customerId</code>、<code>customerToken</code>是确定是否登录的参数，所以在跳转到首页后立马设置<code>cookie</code>值，保证下面的请求都是已登录状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转首页</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">gotoGitchat</span>(<span class="params">page, browser</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求gitchat首页</span></span><br><span class="line">  <span class="keyword">await</span> page.goto(GIT_CHAT_URL, &#123; <span class="attr">timeout</span>: <span class="number">6000000</span> &#125;);</span><br><span class="line">  <span class="comment">// 设置登录的cookie</span></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie=<span class="string">"customerId=your id"</span>;</span><br><span class="line">    <span class="built_in">document</span>.cookie=<span class="string">"customerToken=your token"</span>;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-获取已购课程"><a href="#3-获取已购课程" class="headerlink" title="3) 获取已购课程"></a>3) 获取已购课程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取已购课程列表</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getOrderColumns</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 跳转到我的已购课程</span></span><br><span class="line">  <span class="keyword">let</span> columns = <span class="keyword">await</span> page.goto(<span class="string">`<span class="subst">$&#123;GIT_CHAT_URL&#125;</span>/gitchat/ordered/columns`</span>, &#123; <span class="attr">timeout</span>: <span class="number">6000000</span> &#125;);</span><br><span class="line">  <span class="comment">// 获取dom</span></span><br><span class="line">  <span class="keyword">let</span> columnContent = <span class="keyword">await</span> page.content();</span><br><span class="line">  <span class="comment">// 加载dom</span></span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(columnContent);</span><br><span class="line">  <span class="comment">// 获取已购列表</span></span><br><span class="line">  <span class="keyword">const</span> column = $(<span class="string">'.column'</span>);</span><br><span class="line">  <span class="comment">// 返回链接和标题</span></span><br><span class="line">  <span class="keyword">return</span> _.map(column, (item, index) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      link: item.attribs.href,</span><br><span class="line">      title: $(<span class="string">'.column .columnInfo .columnTitle'</span>)[index].children[<span class="number">0</span>].data,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-获取下载的URL"><a href="#4-获取下载的URL" class="headerlink" title="4) 获取下载的URL"></a>4) 获取下载的URL</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取下载url</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getDownLoadUrl</span>(<span class="params">page, link</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 跳转到具体课程页</span></span><br><span class="line">  <span class="keyword">const</span> column = <span class="keyword">await</span> page.goto(<span class="string">`<span class="subst">$&#123;GIT_CHAT_URL&#125;</span><span class="subst">$&#123;link&#125;</span>`</span>, &#123; <span class="attr">timeout</span>: <span class="number">6000000</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> topicContent = <span class="keyword">await</span> page.$$(<span class="string">'.columnTopics .topicTitle'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pageContent = <span class="keyword">await</span> page.content();</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.load(pageContent);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将课程的地址返回</span></span><br><span class="line">  <span class="keyword">return</span> _.reduce($(<span class="string">'.topicTitle'</span>), (result, item, index) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> clickCallback = $(<span class="string">'.topicTitle'</span>).eq(index).attr(<span class="string">'onclick'</span>);</span><br><span class="line">    <span class="keyword">const</span> title = $(<span class="string">'.titleText'</span>).eq(index).text();</span><br><span class="line">    <span class="keyword">const</span> idsString = clickCallback.replace(<span class="regexp">/(\[)|(\])|\s+|\'|(\()|(\))/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> ids = idsString.replace(<span class="string">'clickOnTopic'</span>, <span class="string">''</span>).split(<span class="string">','</span>);</span><br><span class="line"></span><br><span class="line">    result.push(&#123;</span><br><span class="line">      link: !_.isEmpty(ids) ? <span class="string">`<span class="subst">$&#123;GIT_CHAT_URL&#125;</span>/gitchat/column/<span class="subst">$&#123;ids[<span class="number">1</span>]&#125;</span>/topic/<span class="subst">$&#123;ids[<span class="number">0</span>]&#125;</span>`</span> : <span class="string">''</span>,</span><br><span class="line">      title,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-下载课程"><a href="#5-下载课程" class="headerlink" title="5) 下载课程"></a>5) 下载课程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载对应的pdf,如果没有pdf文件下载，就打印页面</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downColumns</span>(<span class="params">page, targetLink</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取课程地址</span></span><br><span class="line">    <span class="keyword">const</span> downLoadInfo = <span class="keyword">await</span> getDownLoadUrl(page, targetLink.link);</span><br><span class="line">    <span class="comment">// 创建课程文件夹</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`【创建<span class="subst">$&#123;targetLink.title&#125;</span>文件夹】`</span>)</span><br><span class="line">    <span class="keyword">await</span> fs.mkdir(path.join(__dirname, <span class="string">'/columns'</span>, targetLink.title), <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历下载所有课程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; downLoadInfo.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【获取第<span class="subst">$&#123;i&#125;</span>课下载链接】`</span>);</span><br><span class="line">      <span class="keyword">const</span> contentRegx = <span class="regexp">/window.location.href = '([^']+)'/</span>;</span><br><span class="line">      <span class="keyword">const</span> downUrl = downLoadInfo[i].link;</span><br><span class="line">      <span class="keyword">const</span> downloadPath = path.join(__dirname, <span class="string">'columns'</span>, targetLink.title, <span class="string">`<span class="subst">$&#123;downLoadInfo[i].title&#125;</span>.pdf`</span>);</span><br><span class="line">      <span class="comment">// 跳转下载地址页</span></span><br><span class="line">      <span class="keyword">const</span> gotoDownload = <span class="keyword">await</span> page.goto(downUrl, &#123; <span class="attr">timeout</span>: <span class="number">6000000</span> &#125;);</span><br><span class="line">      <span class="comment">// 获取文档内容</span></span><br><span class="line">      <span class="keyword">const</span> downContent = <span class="keyword">await</span> page.content();</span><br><span class="line">      <span class="comment">// 如果没有下载链接的情况下，就执行截屏打印操作</span></span><br><span class="line">      <span class="keyword">if</span> (!contentRegx.test(downContent)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'【没有下载链接】：即将打印成PDF'</span>);</span><br><span class="line">        <span class="comment">// 因为gitchat页面头部和底部都有导航遮挡，所以需要把他们从dom树隐藏掉</span></span><br><span class="line">        <span class="keyword">await</span> page.$<span class="built_in">eval</span>(<span class="string">'body'</span>, body =&gt; &#123;</span><br><span class="line">          body.querySelector(<span class="string">'#header'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">          body.querySelector(<span class="string">'#commentModal'</span>).nextSibling.style.display = <span class="string">'none'</span>;</span><br><span class="line">          <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 截屏</span></span><br><span class="line">        <span class="keyword">await</span> page.emulateMedia(<span class="string">'screen'</span>);</span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        <span class="keyword">await</span> page.pdf(&#123; <span class="attr">path</span>: downloadPath &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`【打印完成】: <span class="subst">$&#123;downLoadInfo[i].title&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> url = downContent.match(contentRegx)[<span class="number">1</span>];</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`【下载链接】:<span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求下载链接并以strem形式写入文件</span></span><br><span class="line">      <span class="keyword">const</span> downLoadReq = request.get(url);</span><br><span class="line">      downLoadReq.pipe(fs.createWriteStream(downloadPath));</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'【下载完成】'</span>);</span><br><span class="line">      <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`【ErrorTip】: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要是讲解一下爬虫实现思路和我实现过程遇到的问题，并没有涉及太多的<code>puppeteer</code>的api操作，具体的操作会在学习总结那里做记录，并且实现代码也有更好的写法，比如可以并发下载（通过打开多个窗口实现）、加入重试机制等。但是毕竟只是为了解决自己的需求，怎么简单怎么来嘛哈哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想起&lt;code&gt;GitChat&lt;/code&gt;的会员要过期了，但是之前购买的达人课只看了一部分，过期不能看就很可惜了，毕竟有些课程质量还是
      
    
    </summary>
    
    
      <category term="Gitchat" scheme="https://jsonya.github.io/tags/Gitchat/"/>
    
      <category term="Puppeteer" scheme="https://jsonya.github.io/tags/Puppeteer/"/>
    
      <category term="爬虫" scheme="https://jsonya.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Centos 使用nvm 并安装node环境</title>
    <link href="https://jsonya.github.io/2018/03/26/Centos-%E4%BD%BF%E7%94%A8nvm-%E5%B9%B6%E5%AE%89%E8%A3%85node%E7%8E%AF%E5%A2%83/"/>
    <id>https://jsonya.github.io/2018/03/26/Centos-使用nvm-并安装node环境/</id>
    <published>2018-03-26T19:40:20.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装epel源"><a href="#安装epel源" class="headerlink" title="安装epel源"></a>安装epel源</h2><ul><li><p>32位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>64位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>导入key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br></pre></td></tr></table></figure></li><li><p>查看rpm是否已经安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --version</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>重启shell</p></li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装epel源&quot;&gt;&lt;a href=&quot;#安装epel源&quot; class=&quot;headerlink&quot; title=&quot;安装epel源&quot;&gt;&lt;/a&gt;安装epel源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;32位&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Centos" scheme="https://jsonya.github.io/tags/Centos/"/>
    
      <category term="nvm" scheme="https://jsonya.github.io/tags/nvm/"/>
    
  </entry>
  
  <entry>
    <title>mac 修改mysql密码</title>
    <link href="https://jsonya.github.io/2017/11/13/mac-%E4%BF%AE%E6%94%B9mysql%E5%AF%86%E7%A0%81/"/>
    <id>https://jsonya.github.io/2017/11/13/mac-修改mysql密码/</id>
    <published>2017-11-13T17:05:52.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac</span><br></pre></td></tr></table></figure><h4 id="安全模式打开Mysql"><a href="#安全模式打开Mysql" class="headerlink" title="安全模式打开Mysql"></a>安全模式打开<code>Mysql</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables</span><br></pre></td></tr></table></figure><h4 id="新窗口下修改密码"><a href="#新窗口下修改密码" class="headerlink" title="新窗口下修改密码"></a>新窗口下修改密码</h4><ol><li><p>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET Password=PASSWORD('NewPassword') WHERE user='root'</span><br></pre></td></tr></table></figure></li><li><p>刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure></li><li><p>退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.server restart</span><br></pre></td></tr></table></figure></li></ol><h4 id="重新登录"><a href="#重新登录" class="headerlink" title="重新登录"></a>重新登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设备&quot;&gt;&lt;a href=&quot;#设备&quot; class=&quot;headerlink&quot; title=&quot;设备&quot;&gt;&lt;/a&gt;设备&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://jsonya.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>rvm 管理ruby&amp;gem</title>
    <link href="https://jsonya.github.io/2017/10/18/rvm-%E7%AE%A1%E7%90%86ruby-gem/"/>
    <id>https://jsonya.github.io/2017/10/18/rvm-管理ruby-gem/</id>
    <published>2017-10-18T23:17:15.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统： macOS</span><br></pre></td></tr></table></figure><h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换</p><p><a href="https://rvm.io/" target="_blank" rel="noopener">https://rvm.io/</a></p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>前提是安装了xcode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="change-ghost"><a href="#change-ghost" class="headerlink" title="change ghost"></a>change ghost</h2><p>切换<code>ruby-china</code>的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "ruby_url=https://cache.ruby-china.org/pub/ruby" &gt; ~/.rvm/user/db</span><br></pre></td></tr></table></figure><h2 id="use-ruby"><a href="#use-ruby" class="headerlink" title="use ruby"></a>use ruby</h2><ol><li><p>列出已知的 Ruby 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list known</span><br></pre></td></tr></table></figure></li><li><p>安装一个 Ruby 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install 2.4.1</span><br></pre></td></tr></table></figure></li><li><p>切换 Ruby 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm use 2.4.1</span><br></pre></td></tr></table></figure></li><li><p>查询已经安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm list</span><br></pre></td></tr></table></figure></li><li><p>移除版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm remove 2.4.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="install-rails"><a href="#install-rails" class="headerlink" title="install rails"></a>install rails</h2><ol><li>安装rails<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install rails</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="rvm" scheme="https://jsonya.github.io/tags/rvm/"/>
    
      <category term="ruby" scheme="https://jsonya.github.io/tags/ruby/"/>
    
      <category term="gem" scheme="https://jsonya.github.io/tags/gem/"/>
    
  </entry>
  
  <entry>
    <title>Git 多公钥管理</title>
    <link href="https://jsonya.github.io/2017/10/12/Git-%E5%A4%9A%E5%85%AC%E9%92%A5%E7%AE%A1%E7%90%86/"/>
    <id>https://jsonya.github.io/2017/10/12/Git-多公钥管理/</id>
    <published>2017-10-12T20:09:19.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "my@mail.com"</span><br></pre></td></tr></table></figure><p>第一个问询命令是创建的公钥名，这里不要直接enter，键入能理解的公钥名如<code>id_rsa_github</code>，二三个命令是询问密码，无需输入</p><p>当然，也可以直接强制输入直接生成<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "my@mail.com" -f ~/.ssh/id-rsa_github</span><br></pre></td></tr></table></figure></p><h2 id="将公钥添加到仓库的ssh-key管理"><a href="#将公钥添加到仓库的ssh-key管理" class="headerlink" title="将公钥添加到仓库的ssh key管理"></a>将公钥添加到仓库的ssh key管理</h2><h2 id="生成key管理"><a href="#生成key管理" class="headerlink" title="生成key管理"></a>生成key管理</h2><p>创建config文件，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    User Jsonya</span><br></pre></td></tr></table></figure></p><h2 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure><h2 id="测试是否添加成功"><a href="#测试是否添加成功" class="headerlink" title="测试是否添加成功"></a>测试是否添加成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure><h2 id="重置全局name"><a href="#重置全局name" class="headerlink" title="重置全局name"></a>重置全局name</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><p>如果之前创建过全局的name则运行上面的命令，重置，然后在项目的仓库中设置局部的name和email</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生成ssh-key&quot;&gt;&lt;a href=&quot;#生成ssh-key&quot; class=&quot;headerlink&quot; title=&quot;生成ssh key&quot;&gt;&lt;/a&gt;生成ssh key&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Git" scheme="https://jsonya.github.io/tags/Git/"/>
    
      <category term="ssh" scheme="https://jsonya.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>纯记录nvm管理node版本</title>
    <link href="https://jsonya.github.io/2017/10/11/nvm-manage/"/>
    <id>https://jsonya.github.io/2017/10/11/nvm-manage/</id>
    <published>2017-10-11T17:36:53.000Z</published>
    <updated>2019-04-25T12:15:04.324Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统： macOS</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>原本打算用homebrew安装，但是看了下<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>的说明目前homebrew还不支持，故放弃</p><p>系统是macOS,所以需要先安装xcode，不想安装的话就<code>xcode-select --install</code>安装需要的</p><p>curl<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash</span><br></pre></td></tr></table></figure></p><p>wget<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget: wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash</span><br></pre></td></tr></table></figure></p><p>安装完后还需要在<code>~/.zshrc</code>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure></p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li><p>安装指定版本的 Node.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install [version]</span><br></pre></td></tr></table></figure></li><li><p>指定当前使用的 Node.js 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use [version]</span><br></pre></td></tr></table></figure></li><li><p>查看当前安装的 Node.js 版本列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure></li><li><p>查看远程可安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line">nvm ls-remote --lts //稳定版本</span><br></pre></td></tr></table></figure></li><li><p>切换最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure></li><li><p>设定默认版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default [version]</span><br></pre></td></tr></table></figure></li><li><p>当前使用版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure></li></ol><h2 id="项目下"><a href="#项目下" class="headerlink" title="项目下"></a>项目下</h2><p>正常来说项目目录下会有一个<code>.nvm</code>记录了项目所使用的<code>node</code>版本的，所以直接运行<code>nvm use</code>就可以切换node版本为项目所使用的版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="nvm" scheme="https://jsonya.github.io/tags/nvm/"/>
    
      <category term="node" scheme="https://jsonya.github.io/tags/node/"/>
    
      <category term="npm" scheme="https://jsonya.github.io/tags/npm/"/>
    
  </entry>
  
</feed>
